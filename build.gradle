import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '2.0.0'
    id "com.github.ben-manes.versions" version "0.52.0"
}

group 'se.alipsa.groovy'
// NOTE: remember to bump version in GmdTemplateEngine when changed
version '2.2.1-SNAPSHOT' // GMD_version_mark

repositories {
    if (version.contains('SNAPSHOT')) {
        mavenLocal()
    }
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    def openhtmltopdfVersion = "1.1.26"
    def log4jVersion = "2.24.3"
    def groovyVersion = "4.0.26"
    def matrixBomVersion = "2.2.1-SNAPSHOT"

    // By using compileOnly instead of implementation, the jar will not be available at runtime
    // and hence users can use whatever compatible version of Groovy that they want
    compileOnly "org.apache.groovy:groovy:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-templates:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    compileOnly 'org.apache.ivy:ivy:2.5.3' // needed for @Grab)
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.commonmark:commonmark:0.24.0"
    implementation "org.commonmark:commonmark-ext-gfm-tables:0.24.0"
    implementation("io.github.openhtmltopdf:openhtmltopdf-core:${openhtmltopdfVersion}")
    implementation("io.github.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmltopdfVersion}")
    implementation("io.github.openhtmltopdf:openhtmltopdf-mathml-support:${openhtmltopdfVersion}")
    implementation "io.github.openhtmltopdf:openhtmltopdf-svg-support:${openhtmltopdfVersion}"
    implementation 'org.jsoup:jsoup:1.19.1'
    // Remember to update HtmlDecorator.BOOTSTRAP_CSS_PATH if the dependency changes
    implementation 'org.webjars:bootstrap:5.3.3'
    implementation(platform("se.alipsa.matrix:matrix-bom:$matrixBomVersion"))
    implementation 'se.alipsa.matrix:matrix-core'
    implementation('se.alipsa.matrix:matrix-charts') {
        exclude(group: "org.openjfx", module: "javafx-base")
        exclude(group: "org.openjfx", module: "javafx-graphics")
        exclude(group: "org.openjfx", module: "javafx-controls")
        exclude(group: "org.openjfx", module: "javafx-swing")
    }
    implementation('se.alipsa.matrix:matrix-xchart')
    implementation 'commons-io:commons-io:2.18.0'
    implementation('org.apache.pdfbox:fontbox:3.0.4')

    testImplementation(platform("org.junit:junit-bom:5.12.1"))
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    testImplementation "org.apache.groovy:groovy:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-templates:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    testImplementation 'org.apache.commons:commons-lang3:3.17.0'
    testImplementation 'org.apache.ivy:ivy:2.5.3' // needed for @Grab)
}

test {
    dependsOn cleanTest
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task fatJar(type: Jar, dependsOn: jar) {
    manifest {
        attributes 'Main-Class': 'se.alipsa.groovy.gmd.Gmd'
    }
    archiveBaseName = 'gmd-bundled'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        def cp = configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.testRuntimeClasspath.each {
            if (it.getName().contains('log4j-core')) {
                cp << zipTree(it)
            }
        }
        //println cp
        cp
    }
    with jar
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Groovy Markdown'
                description = 'Processing markdown text with groovy enhancements embedded and creating, markdown, html of pdf'
                url = "https://github.com/Alipsa/gmd"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/Alipsa/gmd/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/gmd'
                    connection = 'scm:git:https://github.com/ALipsa/gmd.git'
                    developerConnection = 'scm:git:git@github.com:Alipsa/gmd.git'
                }
            }
        }
    }
}

signing {
    if ( !signing.signatory ) {
        logger.warn "No signatory defined. Skipping signing..."
    } else {
        sign publishing.publications.maven
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}