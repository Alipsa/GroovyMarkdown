plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
    id "com.github.ben-manes.versions" version "0.45.0"
}

group 'se.alipsa.groovy'
version '1.0.7-SNAPSHOT'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

dependencies {
    def junitVersion = "[5.9.0, )"
    def openhtmltopdfVersion = "[1.0.10, )"
    def log4jVersion = "[2.18.0, )"
    def groovyVersion = "4.0.9"
    // By using compileOnly instead of implementation, the jar will not be available at runtime
    // and hence users can use whatever compatible version of Groovy that they want
    compileOnly "org.apache.groovy:groovy:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-templates:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation("com.vladsch.flexmark:flexmark-all:[0.64.0,)") {
        constraints {
            implementation "com.ibm.icu:icu4j:71.1"
            because "CWE-190: Integer Overflow or Wraparound: com.openhtmltopdf:openhtmltopdf-rtl-support contains com.ibm.icu:icu4j:59.1"
        }
    }
    implementation("com.openhtmltopdf:openhtmltopdf-mathml-support:${openhtmltopdfVersion}") {
        constraints {
            implementation 'commons-io:commons-io:2.11.0'
            because "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'): org.apache.xmlgraphics:xmlgraphics-commons:2.6 contains commons-io:commons-io:1.3.1"
        }
    }
    implementation "com.openhtmltopdf:openhtmltopdf-svg-support:${openhtmltopdfVersion}"
    implementation 'org.webjars:bootstrap:5.2.3'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    testImplementation "org.apache.groovy:groovy:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-templates:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true

    useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Groovy Markdown'
                description = 'Processing markdown text with groovy enhancements embedded and creating, markdown, html of pdf'
                url = "https://github.com/perNyfelt/gmd"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/perNyfelt/gmd/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/perNyfelt/gmd'
                    connection = 'scm:git:https://github.com/perNyfelt/gmd.git'
                    developerConnection = 'scm:git:git@github.com:perNyfelt/gmd.git'
                }
            }
        }
    }
}

signing {
    if ( !signing.signatory ) {
        logger.warn "No signatory defined. Skipping signing..."
    } else {
        sign publishing.publications.maven
    }
}