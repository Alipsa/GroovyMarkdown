plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '2.0.0'
    id "com.github.ben-manes.versions" version "0.51.0"
}

group 'se.alipsa.groovy'
// NOTE: remember to bump version in GmdTemplateEngine when changed
version '1.1.0-SNAPSHOT'

repositories {
    if (version.contains('SNAPSHOT')) {
        mavenLocal()
    }
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

dependencies {
    def junitVersion = "5.11.4"
    def openhtmltopdfVersion = "1.1.24"
    def log4jVersion = "[2.18.0, )"
    def groovyVersion = "4.0.24"
    def javaFxVersion = '22.0.2'
    org.gradle.internal.os.OperatingSystem os = org.gradle.internal.os.OperatingSystem.current()
    // check https://repo1.maven.org/maven2/org/openjfx/javafx/20/javafx-20.pom for the platform property
    def qualifier = 'unknown'
    if (os.isLinux()) {
        qualifier='linux'
    } else if (os.isWindows()) {
        qualifier = 'win'
    } else if (os.isMacOsX()) {
        qualifier = 'mac-aarch64'
    }
    // By using compileOnly instead of implementation, the jar will not be available at runtime
    // and hence users can use whatever compatible version of Groovy that they want
    compileOnly "org.apache.groovy:groovy:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-templates:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.commonmark:commonmark:0.24.0"
    implementation "org.commonmark:commonmark-ext-gfm-tables:0.24.0"
    // TODO: Consider using https://github.com/flyingsaucerproject/flyingsaucer instead as it is more actively maintained than https://github.com/openhtmltopdf/openhtmltopdf
    // Journo uses flying saucer...
    implementation("io.github.openhtmltopdf:openhtmltopdf-core:${openhtmltopdfVersion}")
    implementation("io.github.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmltopdfVersion}")
    implementation("io.github.openhtmltopdf:openhtmltopdf-mathml-support:${openhtmltopdfVersion}")
    implementation "io.github.openhtmltopdf:openhtmltopdf-svg-support:${openhtmltopdfVersion}"
    implementation 'org.jsoup:jsoup:1.18.3'
    // Remember to update HtmlDecorator.BOOTSTRAP_CSS_PATH if the dependency changes
    implementation 'org.webjars:bootstrap:5.3.3'
    implementation 'se.alipsa.groovy:matrix-core:2.1.1'
    implementation('se.alipsa.groovy:matrix-charts:1.0.0-SNAPSHOT')
    implementation('org.apache.pdfbox:fontbox:3.0.3')

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    testImplementation "org.apache.groovy:groovy:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-templates:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-jsr223:${groovyVersion}"
    testImplementation 'org.apache.commons:commons-lang3:3.17.0'

    // Qualifier must be explicit on linux for some reason, works without qualifiers on mac
    testImplementation "org.openjfx:javafx-base:${javaFxVersion}:${qualifier}"
    testImplementation "org.openjfx:javafx-graphics:${javaFxVersion}:${qualifier}"
    testImplementation "org.openjfx:javafx-controls:${javaFxVersion}:${qualifier}"
    testImplementation "org.openjfx:javafx-swing:${javaFxVersion}:${qualifier}"
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true

    useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Groovy Markdown'
                description = 'Processing markdown text with groovy enhancements embedded and creating, markdown, html of pdf'
                url = "https://github.com/Alipsa/gmd"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/Alipsa/gmd/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/gmd'
                    connection = 'scm:git:https://github.com/ALipsa/gmd.git'
                    developerConnection = 'scm:git:git@github.com:Alipsa/gmd.git'
                }
            }
        }
    }
}

signing {
    if ( !signing.signatory ) {
        logger.warn "No signatory defined. Skipping signing..."
    } else {
        sign publishing.publications.maven
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}