import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id 'groovy'
  id 'java-gradle-plugin'
  id 'signing'
  id 'maven-publish'
  id 'com.gradle.plugin-publish' version '2.0.0'
  id "com.github.ben-manes.versions" version "0.52.0"
}

group = 'se.alipsa.gmd'
version = project.findProperty("publish.version") ?: "unspecified"
description = 'Compiles gmd files into markdown, html or pdf'

gradlePlugin {
  website.set("https://github.com/Alipsa/GroovyMarkdown")
  vcsUrl.set("https://github.com/Alipsa/GroovyMarkdown.git")
  plugins {
    simplePlugin {
      id = "${project.group}.${project.name}"
      implementationClass = 'se.alipsa.gmd.gradle.GmdGradlePlugin'
      displayName = "Gmd Plugin"
      description = project.description
      tags.set(["markdown", "Groovy", "pdf", "html", "gmd"])
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  testImplementation platform('org.junit:junit-bom:5.13.4')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
  test {
    java {
      srcDirs = ['src/test/gmd']
    }
  }
}

test {
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_OUT,
        TestLogEvent.STANDARD_ERROR

    exceptionFormat = TestExceptionFormat.FULL
    showExceptions = true
    showCauses = true
    showStackTraces = true
    showStandardStreams = true
  }
}

project.afterEvaluate {
  tasks.named('signPluginMavenPublication') {
    enabled = project.properties['signing.keyId'] != null
  }
  tasks.named("signSimplePluginPluginMarkerMavenPublication") {
    enabled = project.properties['signing.keyId'] != null
  }
}